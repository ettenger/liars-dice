"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.Player=void 0;var _lodash=require("lodash"),_events=require("events");function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(a){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}// TODO: Send action message to clients when connection closes
//       -- Clients should display disconnected players in italics in the Status Table
//       -- Need to add isConnected, disconnectTime attributes
// TODO: Implement 60 second kick timer for disconnected players
var Player=/*#__PURE__*/function(){function a(b,c){_classCallCheck(this,a),_defineProperty(this,"ws",void 0),_defineProperty(this,"uuid",void 0),_defineProperty(this,"name",""),_defineProperty(this,"numDice",0),_defineProperty(this,"currentRoll",[0]),_defineProperty(this,"isInGame",!1),_defineProperty(this,"isTheirTurn",!1),_defineProperty(this,"lastWager",{}),_defineProperty(this,"actions",new _events.EventEmitter),this.ws=b,this.uuid=c,this.ws.on("message",this.handleClientMessage.bind(this))}return _createClass(a,[{key:"setName",value:function setName(a){this.name=a,this.actions.emit("updated",this)}},{key:"rejoin",value:function rejoin(a){this.ws=a,this.ws.on("message",this.handleClientMessage.bind(this)),this.updateClient(),this.actions.emit("rejoined",this)}},{key:"updateClient",value:function updateClient(){var a={type:"data",name:"player",payload:(0,_lodash.pick)(this,["name","numDice","currentRoll","isInGame","isTheirTurn","lastWager"])};console.log(JSON.stringify(a)),this.ws.send(JSON.stringify(a))}},{key:"beginGame",value:function beginGame(a){this.numDice=a,this.isInGame=!0,this.lastWager={},this.beginNewRound()}},{key:"beginNewRound",value:function beginNewRound(){this.lastWager={},this.roll(),this.updateClient()}},{key:"startTurn",value:function startTurn(){this.isTheirTurn=!0,this.updateClient()}},{key:"placeWager",value:function placeWager(a){this.lastWager=a,this.isTheirTurn=!1,this.actions.emit("wager",a),this.updateClient()}},{key:"loseOneDie",value:function loseOneDie(){--this.numDice,0===this.numDice&&(this.isInGame=!1,this.currentRoll=[],this.actions.emit("player eliminated",this)),this.updateClient()}},{key:"roll",value:function roll(){var a=this;this.currentRoll=_toConsumableArray(Array(this.numDice)).map(function(){return a.randNumberOneToSix()})}},{key:"randNumberOneToSix",value:function randNumberOneToSix(){var a=Math.ceil;return a(6*Math.random())}},{key:"handleClientMessage",value:function handleClientMessage(a){var b;try{b=JSON.parse(a),console.log(b)}catch(b){return void console.log(b,a)}if("data"===b.type)switch(b.name){case"name":this.setName(b.payload.name);}else if("action"===b.type)switch(b.name){case"wager":this.placeWager(b.payload);break;case"start game":this.actions.emit("start game");}}},{key:"publicDetails",get:function get(){return(0,_lodash.pick)(this,["name","numDice","isInGame","isTheirTurn","lastWager"])}}]),a}();exports.Player=Player;