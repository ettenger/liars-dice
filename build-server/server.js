"use strict";var _express=_interopRequireDefault(require("express")),_ws=require("ws"),_path=require("path"),_http=require("http"),_game=require("./models/game"),_player=require("./models/player"),_queryString=_interopRequireDefault(require("query-string"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}var PORT=process.env.PORT||8080,app=(0,_express.default)(),server=(0,_http.createServer)(app);server.listen(PORT,function(){return console.log("Listening on ".concat(PORT))}),app.use(_express.default.static((0,_path.resolve)("..","build"))),app.get("*",function(a,b){b.sendFile((0,_path.resolve)("..","build","index.html"))});var wss=new _ws.Server({server:server}),game=new _game.Game;// TODO: reconnection logic ala https://github.com/websockets/ws/wiki/Websocket-client-implementation-for-auto-reconnect
wss.on("connection",function(a,b){var c=_queryString.default.parse(b.url.substring(1));if(c.name&&c.uuid){// New connection
var d=new _player.Player(a,c.uuid.toString());game.addPlayer(d),d.setName(c.name.toString())}else c.uuid&&// Recovered connection
game.loadPLayer(a,c.uuid.toString());console.log("Client connected"),a.on("close",function(){return console.log("Client disconnected")})});