{"version":3,"sources":["components/NameInput.tsx","components/MiniDice.tsx","components/GameLog.tsx","components/WagerInput.tsx","components/ActionPanel.tsx","interfaces/Wager.ts","interfaces/PlayerData.ts","interfaces/GameData.ts","components/DicePanel.tsx","components/StatusTable.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NameInput","props","state","value","handleChange","bind","handleSubmit","e","this","setState","target","onNameSubmit","toString","preventDefault","onSubmit","type","onChange","autoFocus","React","Component","MiniDice","num","src","alt","height","className","GameLog","GameLogMessage","returnVal","message","name","style","display","color","payload","player","formatWager","wager","tempWager","callBullshit","qty","count","allDice","dice","map","ad","key","alignItems","sort","index","messages","msg","WagerInput","gameDice","sensitiveButton","sensitivityControl","onClick","label","disabled","changeWagerNum","placeWager","updateState","legalWagerChange","minDiceNum","minDiceQty","currentNum","currentQty","submitAllowed","gameData","lastWager","minNum","minQty","allowSubmit","numDiceRemaining","calledBS","messagesSender","direction","diceRemaining","prevProps","margin","changeWagerQty","playerData","isTheirTurn","ActionPanel","OnesBanner","hasOnesBeenWagered","backgroundColor","hasGameStarted","Wager","PlayerData","numDice","currentRoll","isInGame","GameData","players","DicePanel","GameDice","width","StatusTable","PlayerInfo","App","connect","id","uuid","uuidv4","window","sessionStorage","setItem","HOST","location","hostname","origin","replace","ws","WebSocket","onmessage","event","parseData","data","sendMessage","console","log","send","JSON","stringify","initState","getItem","inputString","outputType","output","parse","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.352075a8.chunk.js","sourcesContent":["import React from 'react'; \n\ntype myProps = {\n  onNameSubmit: any\n};\n\ntype myState = {\n  value: string\n}\n\nexport default class NameInput extends React.Component<myProps, myState> {\n  constructor(props: myProps) {\n    super(props);\n    this.state = { value: '' };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({value: e.target.value});\n  }\n\n  handleSubmit(e: React.FormEvent) {\n    this.props.onNameSubmit(this.state.value.toString());\n    e.preventDefault();\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>What should we call you?</label><br/>\n        <input type=\"text\" value={this.state.value} onChange={this.handleChange} autoFocus/><br/>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}","import React from 'react'; \n\ntype myProps = {\n  key: any, \n  num: Number\n};\n\nexport default class MiniDice extends React.Component<myProps> {\n\n  render() {\n      if (this.props.num===0) { return(<span></span>); }\n      return (\n        <img \n          src={\"../images/dice\"+ this.props.num.toString() + \".svg\"} \n          alt={this.props.num.toString()} \n          height=\"20px\" \n          className=\"img-dice\">\n        </img>\n      );\n  }\n}","import React, { Fragment } from 'react'; \nimport Message from '../interfaces/Message'\nimport Wager from '../interfaces/Wager';\nimport MiniDice from './MiniDice';\n\ntype myProps = {\n  messages: Message[]\n};\n\ntype diceReveal = {\n  name: string,\n  dice: number[]\n};\n\nexport default class GameLog extends React.Component<myProps> {\n\n  private GameLogMessage = (props: { key: any, message: Message }) => {\n    let returnVal: any;\n\n    if (props.message.type === 'action') {\n      switch (props.message.name) {\n        case 'player join':\n          returnVal = <span style={{display: 'flex', color: '#9b9b9b'}}>{props.message.payload} joined the game<br/></span>;\n          break;\n        case 'player rejoin':\n          returnVal = <span style={{display: 'flex', color: '#9b9b9b'}}>{props.message.payload} rejoined the game<br/></span>;\n          break;\n        case 'game start':\n          returnVal = <span style={{display: 'flex', color: 'cyan'}}>The game is starting!<br/></span>;\n          break;\n        case 'wager':\n          returnVal = \n            <span style={{display: 'flex'}}>\n              <span style={{color: '#ffc400'}}>{props.message.payload.player}:&nbsp;</span>\n              <span style={{color: 'white'}}>{this.formatWager(props.message.payload.wager)}<br/></span>\n            </span>\n          break;\n        case 'dice reveal':\n          const tempWager: Wager = { callBullshit: false, num: props.message.payload.num, qty: props.message.payload.count}\n          let allDice: Array<diceReveal> = props.message.payload.dice;\n\n          returnVal = \n            <>\n              { allDice.map((ad, key) => (\n                <Fragment key={key}>\n                  <span style={{display: 'flex', alignItems: 'center'}}>\n                    <span style={{color: '#ffc400'}}>{ad.name}:&nbsp;</span>\n                    { ad.dice.sort().map((num, index) =>\n                      <MiniDice\n                        key={index}\n                        num={num}\n                      />,\n                    )}\n                  <br/></span>\n                </Fragment>\n              )) }\n              <span style={{display: 'flex', color: '#d842a6'}}>There {props.message.payload.count !== 1 ? 'are':'is'} {this.formatWager(tempWager)}<br/></span>\n            </>\n          break;\n        case 'lose die':\n          returnVal = <span style={{display: 'flex', color: '#d842a6'}}>{props.message.payload} loses a die<br/></span>\n          break;\n        case 'round start':\n          returnVal = <span style={{display: 'flex', color: 'cyan'}}>Starting a new round!<br/></span>;\n          break;\n        case 'player eliminated':\n          returnVal = <span style={{display: 'flex', color: '#ff4d4d'}}>{props.message.payload} was eliminated!<br/></span>;\n          break;\n        case 'game over':\n          returnVal = <span style={{display: 'flex', color: '#299129'}}>The game is over. {props.message.payload} wins!<br/></span>;\n          break;\n      }\n    } \n\n    return returnVal;\n  }\n\n  private formatWager(wager: Wager) {\n    let numberStrings = ['one', 'two', 'three', 'four', 'five', 'six']\n    if (wager.callBullshit) {\n      return 'Bullshit!';\n    } else if (wager.num) {\n      return (\n        (wager.qty && wager.qty > 0 ? wager.qty : 'no') \n        + ' ' + numberStrings[wager.num-1] \n        + (((wager.qty || wager.num) && wager.qty !== 1 ) ? ((wager.num===6) ? 'es' : 's') : ''));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Gamelog\">\n        <p>\n          { this.props.messages.map((msg, index) =>\n            <this.GameLogMessage\n              key={index}\n              message={msg}\n            />,\n          )}\n        </p>\n      </div>\n    );\n  }\n}","import React from 'react'; \nimport Message from '../interfaces/Message';\nimport GameData from '../interfaces/GameData';\nimport PlayerData from '../interfaces/PlayerData';\nimport Wager from '../interfaces/Wager';\n\ntype myProps = {\n  messagesSender: any,\n  gameData: GameData,\n  playerData: PlayerData\n};\n\ntype myState = {\n  minDiceNum: number,\n  minDiceQty: number,\n  currentNum: number,\n  currentQty: number,\n  submitAllowed: boolean\n};\n\nexport default class WagerInput extends React.Component<myProps, myState> {\n  constructor(props: myProps) {\n    super(props);\n    this.changeWagerNum = this.changeWagerNum.bind(this);\n    this.placeWager = this.placeWager.bind(this);\n    this.updateState = this.updateState.bind(this);\n    this.legalWagerChange = this.legalWagerChange.bind(this);\n    this.state = { minDiceNum: 0, minDiceQty: 0, currentNum: 0, currentQty: 0, submitAllowed: true };\n  }\n\n  componentDidMount() {\n    this.updateState();\n  }\n\n  private updateState() {\n    if (this.props.gameData.lastWager.num && this.props.gameData.lastWager.qty) {\n      let minNum: number;\n      let minQty: number;\n      let allowSubmit: boolean = true;\n\n      if ((this.props.gameData.lastWager.num === 6) \n      && (this.props.gameData.lastWager.qty === this.props.gameData.numDiceRemaining)) {\n        minNum = 6;\n        minQty = this.props.gameData.lastWager.qty;\n        allowSubmit = false;\n      } else if (this.props.gameData.lastWager.num === 6) {\n        minNum = 1;\n        minQty = this.props.gameData.lastWager.qty + 1;\n      } else {\n        minNum = this.props.gameData.lastWager.num + 1 ;\n        minQty = this.props.gameData.lastWager.qty;\n      }\n\n      this.setState({ \n        minDiceNum: minNum,\n        minDiceQty: minQty,\n        currentNum: minNum, \n        currentQty: minQty,\n        submitAllowed: allowSubmit\n      });\n    } else {\n      this.setState({ \n        minDiceNum: 1, \n        minDiceQty: 1,\n        currentNum: 1,\n        currentQty: 1,\n        submitAllowed: true\n      });\n    }\n  }\n\n  private placeWager(calledBS: boolean = false) {\n    let wager : Wager;\n    if (calledBS) {\n      wager = { callBullshit: calledBS, num: this.props.gameData.lastWager.num, qty: this.props.gameData.lastWager.qty };\n    } else {\n      wager = { callBullshit: calledBS, num: this.state.currentNum, qty: this.state.currentQty };\n    }\n    const message : Message = { type: 'action', name: 'wager', payload: wager };\n    this.props.messagesSender(message);\n  }\n\n  private changeWagerQty(direction: 'increase' | 'decrease') {\n    let currentNum = this.state.currentNum;\n    let currentQty = this.state.currentQty;\n    let minQty = this.state.minDiceQty;\n    let minNum = this.state.minDiceNum;\n    let diceRemaining = this.props.gameData.numDiceRemaining;\n\n    if ((direction==='increase') && (currentQty < diceRemaining)) {\n      this.setState({ currentQty: currentQty + 1 });  \n    } else if ((direction==='decrease') && (currentQty === (minQty+1)) && currentNum < minNum) {\n      this.setState({ currentQty: currentQty - 1, currentNum: minNum });  \n    } else if ((direction==='decrease') && (currentQty > minQty)) {\n      this.setState({ currentQty: currentQty - 1 });  \n    }\n  }\n\n  private legalWagerChange(direction: 'increase' | 'decrease') {\n    let currentNum = this.state.currentNum;\n    let currentQty = this.state.currentQty;\n    let minQty = this.state.minDiceQty;\n    let minNum = this.state.minDiceNum;\n    let diceRemaining = this.props.gameData.numDiceRemaining;\n    let returnVal: boolean = false;\n\n    if (direction==='increase' && currentNum === 6) {\n      if (currentQty < diceRemaining) {\n        returnVal = true;\n      }\n    } else if (direction==='increase') {\n      returnVal = true;\n    } else if (direction==='decrease' && currentNum === 1) {\n      if (minQty < currentQty) {\n        returnVal = true;\n      }\n    } else if (direction==='decrease') {\n      if (!(currentQty===minQty && currentNum===minNum)) {\n        returnVal = true;\n      }\n    }\n    return returnVal;\n  }\n\n  private changeWagerNum(direction: 'increase' | 'decrease') {\n    let currentNum = this.state.currentNum;\n    let currentQty = this.state.currentQty;\n    let minQty = this.state.minDiceQty;\n    let minNum = this.state.minDiceNum;\n    let diceRemaining = this.props.gameData.numDiceRemaining;\n\n    if (direction==='increase') {\n      switch (true) {\n        case currentNum < 6:\n          this.setState({currentNum: currentNum + 1});\n          break;\n        case currentNum === 6:\n          // Allow the + button to rollover from 6 to 1, but increase the wager qty\n          // Only allow legal wagers\n          if (currentQty < diceRemaining) {\n            this.setState({ currentNum: 1, currentQty: currentQty + 1 });\n          }\n          break;\n      }\n    } else {\n      switch (true) {\n        case currentNum > 1:\n          //Only allow legal wagers\n          if (!(currentQty===minQty && currentNum===minNum)) {\n            this.setState({ currentNum: currentNum - 1 });\n          }\n          break;\n        case currentNum === 1:\n          // Allow the - button to rollowver from 1 to 6, but decrease the wager qty\n          // Only allow legal wagers\n          if (minQty < currentQty) {\n            this.setState({ currentNum: 6, currentQty: currentQty - 1 });\n          }\n          break;\n      }\n    }\n  }\n\n  private gameDice = (props: { num: Number }) => {\n    if (props.num===0) { return(<span></span>); }\n    return (\n      <img \n        src={\"../images/dice\"+ props.num.toString() + \".svg\"} \n        alt={props.num.toString()} \n        height=\"45px\" \n        className=\"img-dice\">\n      </img>\n    );\n  }\n\n  private sensitiveButton = (props: { label: string, onClick: any, sensitivityControl: boolean }) => {\n    if (props.sensitivityControl) {\n      return (<button type=\"submit\" onClick={props.onClick}>{props.label}</button>);\n    } else {\n      return (<button type=\"submit\" onClick={props.onClick} disabled>{props.label}</button>);\n    }\n  }\n  componentDidUpdate(prevProps: myProps) {\n    if ((this.props.gameData.lastWager.num !== prevProps.gameData.lastWager.num)\n      || (this.props.gameData.lastWager.qty !== prevProps.gameData.lastWager.qty)\n      || (this.props.gameData.numDiceRemaining !== prevProps.gameData.numDiceRemaining)) {\n        this.updateState();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Wager-input\">\n        <div style={{margin: \"0 5px\"}}>Enter a wager:</div>\n        <div className=\"div-vertical-btns\">\n          <this.sensitiveButton \n            label='+' \n            onClick={() => this.changeWagerQty('increase')} \n            sensitivityControl={this.props.playerData.isTheirTurn && (this.state.currentQty < this.props.gameData.numDiceRemaining)}\n          />\n          <this.sensitiveButton \n            label='-' \n            onClick={() => this.changeWagerQty('decrease')} \n            sensitivityControl={this.props.playerData.isTheirTurn && (this.state.currentQty > this.state.minDiceQty)}\n          />\n        </div>\n        <div>\n          { this.state.currentQty }\n        </div>\n        <div style={{margin: \"0 5px\"}}>x</div>\n        <this.gameDice num = { this.state.currentNum ? this.state.currentNum : 1 } />\n        <div className=\"div-vertical-btns\">\n          <this.sensitiveButton \n            label='+' \n            onClick={() => this.changeWagerNum('increase')} \n            sensitivityControl={this.props.playerData.isTheirTurn && this.legalWagerChange('increase')}\n          />\n          <this.sensitiveButton \n            label='-' \n            onClick={() => this.changeWagerNum('decrease')} \n            sensitivityControl={this.props.playerData.isTheirTurn && this.legalWagerChange('decrease')}\n          />\n        </div>\n        <div>\n          <this.sensitiveButton \n            label='Submit Wager' \n            onClick={() => this.placeWager()} \n            sensitivityControl={this.props.playerData.isTheirTurn && this.state.submitAllowed}\n          />\n        </div>\n        <div style={{margin: \"0 5px\"}}>or</div>\n        <div>\n          <this.sensitiveButton \n            label='Call BS' \n            onClick={() => this.placeWager(true)} \n            sensitivityControl={this.props.playerData.isTheirTurn && (this.state.minDiceNum > 1 || this.state.minDiceQty > 1)}\n          />\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react'; \nimport Message from '../interfaces/Message';\nimport GameData from '../interfaces/GameData';\nimport WagerInput from './WagerInput';\nimport PlayerData from '../interfaces/PlayerData';\n\ntype myProps = {\n  messagesSender: any,\n  gameData: GameData,\n  playerData: PlayerData\n};\n\nexport default class ActionPanel extends React.Component<myProps> {\n  constructor(props: myProps) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  private handleSubmit() {\n    const message : Message = { type: 'action', name: 'start game', payload: {} };\n    this.props.messagesSender(message);\n  }\n\n  private OnesBanner = (props: { hasOnesBeenWagered: boolean }) => {\n    if (props.hasOnesBeenWagered) {\n      return (\n        <div className=\"Ones-banner\" style={{backgroundColor: '#ff5555'}}>\n          Ones are no longer wild\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"Ones-banner\" style={{backgroundColor: '#398a18'}}>\n          Ones are still wild\n        </div>\n      );\n    }\n  }\n\n  render() {\n\n    if (this.props.gameData.hasGameStarted) {\n      return (\n        <div className=\"Action-panel\">\n          <this.OnesBanner hasOnesBeenWagered = {this.props.gameData.hasOnesBeenWagered} />\n          <WagerInput \n            messagesSender = {this.props.messagesSender} \n            gameData = {this.props.gameData} \n            playerData = {this.props.playerData}\n          />\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"Action-panel\">\n          <div>\n            <button type=\"submit\" value=\"Start Game\" onClick={this.handleSubmit}>Start Game</button>\n          </div>\n        </div>\n      );\n    }\n  }\n}","export default class Wager {\n    callBullshit?: boolean;\n    num?: number;\n    qty?: number;\n  }","import Wager from \"./Wager\";\n\nexport default class PlayerData {\n    name: string = '';\n    numDice: number = 0;\n    currentRoll: number[] = [0];\n    isInGame: boolean = false;\n    isTheirTurn: boolean = false;\n    lastWager: Wager = new Wager();\n  }","import PlayerData from \"./PlayerData\";\nimport Wager from \"./Wager\";\n\nexport default class GameData {\n    players: PlayerData[] = [new PlayerData()];\n    numDiceRemaining: number = 0;\n    hasOnesBeenWagered: boolean = false;\n    hasGameStarted: boolean = false;\n    lastWager: Wager = {};\n  }","import React from 'react'; \nimport PlayerData from '../interfaces/PlayerData';\n\ntype myProps = {\n  playerData: PlayerData\n};\n\nexport default class DicePanel extends React.Component<myProps> {\n\n  private GameDice = (props: { key: any, num: Number }) => {\n    if (props.num===0) { return(<span></span>); }\n    return (\n      <img \n        src={\"../images/dice\"+ props.num.toString() + \".svg\"} \n        alt={props.num.toString()} \n        height=\"100%\" \n        width=\"15%\"\n        className=\"img-dice\">\n      </img>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"DicePanel\">\n        { this.props.playerData.currentRoll.map((num, index) =>\n          <this.GameDice\n            key={index}\n            num={num}\n          />,\n        )}\n      </div>\n    );\n  }\n}","import React from 'react'; \nimport GameData from '../interfaces/GameData';\nimport PlayerData from '../interfaces/PlayerData';\n\ntype myProps = {\n  gameData: GameData\n};\n\nexport default class StatusTable extends React.Component<myProps> {\n\n  private PlayerInfo = (props: { key: any, player: PlayerData }) => {\n    return (\n      <tr className={props.player.isTheirTurn ? 'highlight-text' : ''}>\n        <td>{ props.player.name }</td>\n        <td>{ props.player.numDice }</td>\n      </tr>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"status-div\">\n        <table className=\"Status-table\">\n          <tbody>\n            <tr>\n              <th>Player</th>\n              <th>Dice</th>\n            </tr>\n            { this.props.gameData.players.map((player, index) =>\n              <this.PlayerInfo\n                key={index}\n                player={player}\n              />,\n            )}\n            <tr>\n              <td><strong>Total</strong></td>\n              <td><strong>{ this.props.gameData.numDiceRemaining }</strong></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}","import React from 'react'; \nimport './App.css';\nimport NameInput from './components/NameInput';\nimport GameLog from './components/GameLog';\nimport Message from './interfaces/Message';\nimport ActionPanel from './components/ActionPanel';\nimport GameData from './interfaces/GameData';\nimport PlayerData from './interfaces/PlayerData';\nimport DicePanel from './components/DicePanel';\nimport StatusTable from './components/StatusTable';\nimport { v4 as uuidv4 } from 'uuid';\n\ntype AppState = {\n  ws?: WebSocket,\n  uuid?: string,\n  name: string,\n  messages: Message[],\n  gameData: GameData,\n  playerData: PlayerData\n}\n\nexport default class App extends React.Component<{}, AppState> {\n  constructor(props: any) {\n    super(props);\n    var initState: AppState = { name: '', messages: [], gameData: new GameData(), playerData: new PlayerData() };\n    \n    // If a UUID exists for this session, use it\n    const id: string | null = window.sessionStorage.getItem(\"liars-dice-uuid\")\n    if (id) { initState.uuid = id; console.log('Found UUID'); }\n\n    this.state = initState;\n    this.connect = this.connect.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.state.uuid) { \n      this.connect(); \n    }\n  }\n\n  private connect = (name?: string) => {   \n    // Retreive or create a UUID\n    let id = this.state.uuid\n    if (name) {\n      id = uuidv4();\n      window.sessionStorage.setItem(\"liars-dice-uuid\", id);\n    }\n\n    // Connect to ws server and pass UUID and name (if provided)\n    let HOST = (window.location.hostname === 'localhost') ? 'ws://localhost:8080' : window.location.origin.replace(/^http/, 'ws');\n    HOST += '/?uuid=' + id;\n    if (name) { HOST += '&name=' + name; }\n    const ws = new WebSocket(HOST);\n\n    // Save state data\n    if (name) {\n      this.setState({ ws: ws, uuid: id, name: name });\n    } else {\n      this.setState({ ws: ws, uuid: id });\n    }\n\n    ws.onmessage = (event: MessageEvent) => {\n      let message: any = this.parseData(event.data,'Message');\n      if (!message) { return; }\n\n      let data: any;\n\n      if (message.type === 'action') {\n        // Save action messages to state for the Game Log\n        this.setState({ messages: [...this.state.messages, message] });\n      } else if (message.type === 'data') {\n        switch (message.name) {\n          // Save server data to state\n          case 'game':\n            data = this.parseData(event.data,'GameData');\n            if (data) {\n              this.setState({ gameData: message.payload });\n            }\n            break;\n          case 'player':\n            data = this.parseData(event.data,'PlayerData');\n            if (data) {\n              this.setState({ playerData: message.payload });\n            }\n            break;\n        } \n      } else if (message.type === 'heartbeat') {\n          // console.log(\"Heartbeat received\");\n      }\n    }\n  }\n\n  private parseData(inputString: string, outputType: 'Message' | 'GameData' | 'PlayerData' | 'Other') {\n    let output: any;\n\n    try {\n      switch (outputType) {\n        case 'Message':\n          output = JSON.parse(inputString) as Message;\n          break;\n        case 'GameData':\n          output = JSON.parse(inputString) as GameData;\n          break;\n        case 'PlayerData':\n          output = JSON.parse(inputString) as PlayerData;\n          break;\n        default:\n          output = JSON.parse(inputString);\n          break;\n      }\n      console.log('Successfully parsed ' + outputType.toString() + ' object:');\n      console.log(output);\n      return output;\n    } catch (e) {\n      console.log('Unable to parse object! Attempted type: ' + outputType.toString());\n      console.log('inputString:')\n      console.log(inputString);\n      console.log('Error: ' + e.message)\n      return false;\n    }\n  }\n\n  private sendMessage = (message: Message) => {\n    console.log('Sending message!');\n    if (this.state.ws) {\n      this.state.ws.send(JSON.stringify(message));\n    } else {\n      console.log('Unable to send message - no WebSocket in App.state');\n    }\n  }\n\n  render() {\n    if (!this.state.uuid) {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <NameInput onNameSubmit = { this.connect } />\n          </header>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <div className=\"Content-left\">\n              { this.state.gameData.hasGameStarted ? \n                <DicePanel playerData = { this.state.playerData } /> : \n                <div className=\"DicePanel\"></div> \n              }\n              <GameLog messages = { this.state.messages } />\n              <ActionPanel \n                messagesSender = { this.sendMessage } \n                gameData = { this.state.gameData } \n                playerData = { this.state.playerData }\n              />\n            </div>\n            <div className=\"Content-right\">\n              <StatusTable gameData = { this.state.gameData } />\n            </div>\n          </header>\n        </div>\n      );\n    }\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}